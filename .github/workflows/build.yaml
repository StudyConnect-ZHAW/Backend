name: Build

on:
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch: # enables manual trigger

permissions:
  issues: write
  pull-requests: write
  contents: read
  security-events: write

  
jobs:
  build-and-analyze:
    name: Build, Test & Analyze Backend
    runs-on: windows-latest # Stays on Windows for .NET
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Required for SonarQube PR analysis

      - name: Set up JDK 21 # Sonar Scanner needs Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21' # LTS version compatible with recent SonarQube
      
      - name: Set up .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '6.0.x'

      - name: Cache SonarQube scanner tool
        id: cache-sonar-scanner-tool # Different ID from packages
        uses: actions/cache@v4
        with:
          # Cache the installed tool location
          path: C:\Users\runneradmin\.dotnet\tools # Default global tool path on Windows runner
          key: ${{ runner.os }}-sonar-scanner-tool-v1 # Increment version if tool changes
          restore-keys: |
            ${{ runner.os }}-sonar-scanner-tool-

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages # NuGet package cache location
          # Key based on OS and the packages.lock.json or project files
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      # --- Setup Tools ---
      - name: Install SonarQube scanner tool (if not cached)
        # Only run if cache wasn't restored (cache-hit is 'false' or empty)
        if: steps.cache-sonar-scanner-tool.outputs.cache-hit != 'true'
        run: dotnet tool install --global dotnet-sonarscanner
        shell: pwsh # Use PowerShell for consistency

      # Add .dotnet tools folder to PATH
      - name: Add .NET tools to PATH
        run: echo "$HOME\.dotnet\tools" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        shell: pwsh

      - name: Install jq (for parsing SonarQube results)
        run: choco install jq --version=1.7.1 # Use Chocolatey package manager on Windows
        shell: pwsh

      # --- Build, Test, Analyze ---
      - name: Begin SonarQube Analysis
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Still needed for potential future use or other integrations
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          Write-Host "Current Directory: $(Get-Location)"
          $sonarArgs = @(
            "/k:StudyConnect",
            "/d:sonar.login=${{ env.SONAR_TOKEN }}",
            "/d:sonar.host.url=${{ env.SONAR_HOST_URL }}",
            "/d:sonar.verbose=true",
            "/d:sonar.cs.opencover.reportsPaths=./TestResults/coverage.opencover.xml", # Use the path from sonar-project.properties
            "/d:sonar.sources=StudyConnect.API, StudyConnect.Data, StudyConnect.Core", # Source directories
            "/d:sonar.tests=StudyConnect.API.Tests, StudyConnect.Data.Tests, StudyConnect.Core.Tests", # Test directories
            "/d:sonar.exclusions=StudyConnect.Data/Migrations/**/*,**/obj/**/*,**/bin/**/*,**/AssemblyInfo.cs,**/TemporaryGeneratedFile_*.cs,**/AssemblyAttributes.cs", # Exclude migrations and generated files
            "/d:sonar.branch.name=${{ github.head_ref }} # Use the branch name for PR analysis" # Branch name for PR analysis
          )

          Write-Host "Starting SonarScanner with args: $($sonarArgs -join ' ')"
          dotnet-sonarscanner begin $sonarArgs
        shell: pwsh

      - name: Restore dependencies
        run: dotnet restore
        shell: pwsh

      - name: Build solution
        run: dotnet build --no-restore --configuration Release # Build in Release for analysis
        shell: pwsh

      - name: Run Tests and Collect Coverage
        # Adjust the test project path and coverage command as needed
        # Ensure your test projects reference Coverlet.Collector NuGet package
        run: dotnet test --no-build --configuration Release --collect:"XPlat Code Coverage" --results-directory TestResults --logger "trx;LogFileName=testresults.trx" `
             /p:CollectCoverage=true `
             /p:CoverletOutputFormat=opencover `
             /p:CoverletOutput=./TestResults/coverage.opencover.xml # Output path matches sonar-project.properties and sonar-scanner begin
        shell: pwsh

      - name: End SonarQube Analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: dotnet-sonarscanner end /d:sonar.login=${{ env.SONAR_TOKEN }}
        shell: pwsh

      # --- Wait and Fetch Results ---
      - name: Wait for SonarQube Analysis Task Completion
        id: wait_for_sonar_task
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        # Use PowerShell for the script on Windows
        run: |
          # --- Configuration ---
          # .NET Scanner often puts report task in .sonarqube/out/.sonar/
          $TaskReportFile = ".sonarqube/out/.sonar/report-task.txt"
          $TotalTimeoutSec = 600 # Max time to wait (10 minutes)
          $PollIntervalSec = 10  # Time between checks

          # --- Script ---
          Write-Host "Waiting for SonarQube analysis task to complete..."

          if (-not (Test-Path $TaskReportFile)) {
            Write-Error "Task report file '$TaskReportFile' not found. Was the SonarQube Scan successful?"
            # Try looking in default location as fallback
            $TaskReportFile = ".scannerwork/report-task.txt"
            if (-not (Test-Path $TaskReportFile)) {
               Write-Error "Also checked fallback '$TaskReportFile' - not found."
               exit 1
            } else {
               Write-Warning "Using fallback task report file: $TaskReportFile"
            }
          }

          $TaskContent = Get-Content $TaskReportFile -Raw
          $TaskId = ($TaskContent | Select-String -Pattern "ceTaskId=(.*)" | Select-Object -ExpandProperty Matches).Groups[1].Value
          # $AnalysisId = ($TaskContent | Select-String -Pattern "analysisId=(.*)" | Select-Object -ExpandProperty Matches).Groups[1].Value

          if (-not $TaskId) {
            Write-Error "Could not extract Task ID (ceTaskId) from '$TaskReportFile'."
            Write-Host "File Content:"
            Write-Host $TaskContent
            exit 1
          }

          Write-Host "Found SonarQube Task ID: $TaskId"
          # if ($AnalysisId) { Write-Host "Found SonarQube Analysis ID: $AnalysisId" }

          $TaskUrl = "${{ env.SONAR_HOST_URL }}/api/ce/task?id=$TaskId"
          Write-Host "Polling URL: $TaskUrl"
          $EncodedAuth = [Convert]::ToBase64String([Text.Encoding]::UTF8.GetBytes("${{ env.SONAR_TOKEN }}:"))
          $Headers = @{ "Authorization" = "Basic $EncodedAuth" }

          $StartTime = Get-Date
          $Attempt = 1
          while ($true) {
            $CurrentTime = Get-Date
            $ElapsedTime = New-TimeSpan -Start $StartTime -End $CurrentTime

            if ($ElapsedTime.TotalSeconds -ge $TotalTimeoutSec) {
              Write-Error "Timeout waiting for SonarQube task $TaskId to complete after $($ElapsedTime.TotalSeconds) seconds."
              exit 1
            }

            Write-Host "Checking task status (attempt $Attempt)..."
            try {
              $response = Invoke-RestMethod -Uri $TaskUrl -Headers $Headers -Method Get -ErrorAction Stop
              $status = $response.task.status
            } catch {
              Write-Warning "Failed to fetch task status: $($_.Exception.Message). Retrying..."
              Start-Sleep -Seconds $PollIntervalSec
              $Attempt++
              continue # Retry the loop
            }

            if (-not $status) {
               Write-Warning "Could not extract task status from API response. Retrying..."
               Write-Host "Raw response:"
               Write-Host ($response | ConvertTo-Json -Depth 5)
               Start-Sleep -Seconds $PollIntervalSec
               $Attempt++
               continue # Retry the loop
            }

            Write-Host "Current task status: $status"

            switch ($status) {
              "SUCCESS" {
                Write-Host "SonarQube analysis task $TaskId completed successfully."
                exit 0 # Success!
              }
              "FAILED" {
                Write-Error "SonarQube analysis task $TaskId failed (Status: $status)."
                exit 1 # Failure!
              }
              "CANCELED" {
                  Write-Error "SonarQube analysis task $TaskId was canceled (Status: $status)."
                  exit 1 # Failure!
              }
              "PENDING" {
                Write-Host "Analysis is $status. Waiting ${PollIntervalSec}s..."
                Start-Sleep -Seconds $PollIntervalSec
              }
              "IN_PROGRESS" {
                 Write-Host "Analysis is $status. Waiting ${PollIntervalSec}s..."
                 Start-Sleep -Seconds $PollIntervalSec
              }
              default {
                Write-Warning "Unknown task status '$status' received. Treating as 'in progress'."
                Start-Sleep -Seconds $PollIntervalSec
              }
            }
            $Attempt++
          }
        shell: pwsh # Ensure PowerShell Core is used

      - name: Fetch SonarQube Analysis Results
        id: fetch_sonar_results
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          $ProjectKey = "StudyConnect" # Your project key
          $SonarHost = "${{ env.SONAR_HOST_URL }}"
          $SonarToken = "${{ env.SONAR_TOKEN }}"
          $ApiUrl = "$SonarHost/api/qualitygates/project_status?projectKey=$ProjectKey"

          Write-Host "Fetching Quality Gate status from: $ApiUrl"
          $EncodedAuth = [Convert]::ToBase64String([Text.Encoding]::UTF8.GetBytes("${SonarToken}:"))
          $Headers = @{ "Authorization" = "Basic $EncodedAuth" }

          try {
            # Add -UseBasicParsing for potentially broader compatibility if Invoke-RestMethod has issues
            $analysisResultJson = Invoke-RestMethod -Uri $ApiUrl -Headers $Headers -Method Get -ErrorAction Stop #-UseBasicParsing
          } catch {
             Write-Error "Failed to fetch SonarQube analysis results. Status Code: $($_.Exception.Response.StatusCode), Response: $($_.Exception.Response.Content)"
             exit 1
          }

          if (-not $analysisResultJson) {
              Write-Error "Failed to fetch SonarQube analysis results. Response was empty."
              exit 1
          }

          # Convert PS object to JSON string for jq
          $analysisResultText = $analysisResultJson | ConvertTo-Json -Depth 10
          # Write-Host "Raw analysis result JSON: $analysisResultText" # Debugging

          # Use jq to extract data
          $quality_gate_status = $analysisResultText | jq -r '.projectStatus.status'
          if ($quality_gate_status -eq "null" -or -not $quality_gate_status) {
             Write-Error "Could not extract Quality Gate status from SonarQube response."
             Write-Host "Response JSON: $analysisResultText"
             exit 1
          }

          # Format conditions using jq
          $conditions = $analysisResultText | jq -r '.projectStatus.conditions | map("- \(.metricKey) (\(.status)): \(.actualValue // "N/A") (required \(.errorThreshold // "-"))") | join("\n")'

          # Store extracted values in GitHub environment
          Write-Host "Quality Gate Status: $quality_gate_status"
          "quality_gate_status=$quality_gate_status" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          # Handle multiline conditions - Use a unique delimiter
          $delimiter = "ghadelimiter_$(Get-Random)"
          "conditions<<$delimiter" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          $conditions | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          "$delimiter" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        shell: pwsh # Use PowerShell

      # --- Report Results ---
      - name: Post Comment on PR
        # Only run for pull request events
        if: github.event_name == 'pull_request'
        uses: peter-evans/create-or-update-comment@v4
        env: 
          quality_gate_status: ${{ env.quality_gate_status }}
          conditions: ${{ env.conditions }}
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            **Backend SonarQube Analysis Results** (Branch Scan)

            *   **Quality Gate Status:** `${{ env.quality_gate_status }}`

            *   **Conditions:**

            ${{ env.conditions }}

            [View Full Report on SonarQube](${{ secrets.SONAR_HOST_URL }}/dashboard?id=StudyConnect)

      
      - name: Check Quality Gate Status (Fail Workflow on Error)
        if: env.quality_gate_status != 'OK' && env.quality_gate_status != 'NONE' # NONE means no Quality Gate defined
        run: |
         Write-Error "SonarQube Quality Gate status is ${{ env.quality_gate_status }}. Failing the workflow."
          exit 1
        shell: pwsh # Use PowerShell for exit code
        

